import 'dart:math';
import 'package:flutter/material.dart';
import 'package:sensors_plus/sensors_plus.dart';

class BalanceGameScreen extends StatefulWidget {
  const BalanceGameScreen({super.key});

  @override
  State<BalanceGameScreen> createState() => _BalanceGameScreenState();
}

class _BalanceGameScreenState extends State<BalanceGameScreen> {
  // Bi·∫øn ƒë·ªÉ l∆∞u v·ªã tr√≠ c·ªßa qu·∫£ bi
  double ballX = 100.0;
  double ballY = 100.0;

  // Bi·∫øn ƒë·ªÉ l∆∞u v·ªã tr√≠ c·ªßa ƒë√≠ch
  double targetX = 200.0;
  double targetY = 400.0;

  // K√≠ch th∆∞·ªõc c·ªßa qu·∫£ bi v√† ƒë√≠ch
  static const double ballSize = 50.0;
  static const double targetSize = 60.0;

  // T·ªëc ƒë·ªô v√† ƒë·ªô m∆∞·ª£t c·ªßa chuy·ªÉn ƒë·ªông
  static const double sensitivity = 8.0;
  static const double friction = 0.95;

  // Velocity ƒë·ªÉ l√†m m∆∞·ª£t chuy·ªÉn ƒë·ªông
  double velocityX = 0.0;
  double velocityY = 0.0;

  // K√≠ch th∆∞·ªõc m√†n h√¨nh
  late double screenWidth;
  late double screenHeight;

  // Bi·∫øn ƒë·ªÉ theo d√µi tr·∫°ng th√°i game
  bool isGameWon = false;
  int score = 0;

  @override
  void initState() {
    super.initState();
    _startListeningToAccelerometer();
  }

  void _startListeningToAccelerometer() {
    accelerometerEventStream().listen((AccelerometerEvent event) {
      if (mounted && !isGameWon) {
        setState(() {
          // C·∫≠p nh·∫≠t velocity d·ª±a tr√™n d·ªØ li·ªáu gia t·ªëc k·∫ø
          velocityX += event.x * sensitivity;
          velocityY -=
              event.y * sensitivity; // ƒê·∫£o ng∆∞·ª£c tr·ª•c Y ƒë·ªÉ t·ª± nhi√™n h∆°n

          // √Åp d·ª•ng friction ƒë·ªÉ l√†m m∆∞·ª£t
          velocityX *= friction;
          velocityY *= friction;

          // C·∫≠p nh·∫≠t v·ªã tr√≠ qu·∫£ bi
          ballX += velocityX;
          ballY += velocityY;

          // Gi·ªõi h·∫°n qu·∫£ bi kh√¥ng ra kh·ªèi m√†n h√¨nh
          _constrainBallPosition();

          // Ki·ªÉm tra ƒëi·ªÅu ki·ªán th·∫Øng
          _checkWinCondition();
        });
      }
    });
  }

  void _constrainBallPosition() {
    if (ballX < 0) {
      ballX = 0;
      velocityX = 0;
    }
    if (ballX > screenWidth - ballSize) {
      ballX = screenWidth - ballSize;
      velocityX = 0;
    }
    if (ballY < 0) {
      ballY = 0;
      velocityY = 0;
    }
    if (ballY > screenHeight - ballSize) {
      ballY = screenHeight - ballSize;
      velocityY = 0;
    }
  }

  void _checkWinCondition() {
    // T√≠nh kho·∫£ng c√°ch gi·ªØa t√¢m qu·∫£ bi v√† t√¢m ƒë√≠ch
    double ballCenterX = ballX + ballSize / 2;
    double ballCenterY = ballY + ballSize / 2;
    double targetCenterX = targetX + targetSize / 2;
    double targetCenterY = targetY + targetSize / 2;

    double distance = sqrt(
      pow(ballCenterX - targetCenterX, 2) + pow(ballCenterY - targetCenterY, 2),
    );

    // Ki·ªÉm tra va ch·∫°m (t·ªïng b√°n k√≠nh)
    double collisionDistance = (ballSize + targetSize) / 2;

    if (distance < collisionDistance) {
      _onWin();
    }
  }

  void _onWin() {
    setState(() {
      isGameWon = true;
      score++;
    });

    // Hi·ªÉn th·ªã th√¥ng b√°o chi·∫øn th·∫Øng
    _showWinDialog();
  }

  void _showWinDialog() {
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text('üéâ Ch√∫c m·ª´ng!'),
          content: Text('B·∫°n ƒë√£ ho√†n th√†nh th·ª≠ th√°ch!\nƒêi·ªÉm s·ªë: $score'),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.of(context).pop();
                _nextLevel();
              },
              child: const Text('Ch∆°i ti·∫øp'),
            ),
            TextButton(
              onPressed: () {
                Navigator.of(context).pop();
                _resetGame();
              },
              child: const Text('Ch∆°i l·∫°i'),
            ),
          ],
        );
      },
    );
  }

  void _nextLevel() {
    setState(() {
      isGameWon = false;
      velocityX = 0;
      velocityY = 0;

      // T·∫°o v·ªã tr√≠ ng·∫´u nhi√™n cho ƒë√≠ch m·ªõi
      final random = Random();
      targetX = random.nextDouble() * (screenWidth - targetSize);
      targetY = random.nextDouble() * (screenHeight - targetSize);

      // ƒê·∫∑t l·∫°i v·ªã tr√≠ qu·∫£ bi ·ªü gi·ªØa m√†n h√¨nh
      ballX = screenWidth / 2 - ballSize / 2;
      ballY = screenHeight / 2 - ballSize / 2;
    });
  }

  void _resetGame() {
    setState(() {
      isGameWon = false;
      score = 0;
      velocityX = 0;
      velocityY = 0;

      // ƒê·∫∑t l·∫°i v·ªã tr√≠ ban ƒë·∫ßu
      ballX = 100.0;
      ballY = 100.0;
      targetX = 200.0;
      targetY = 400.0;
    });
  }

  @override
  Widget build(BuildContext context) {
    // L·∫•y k√≠ch th∆∞·ªõc m√†n h√¨nh
    screenWidth = MediaQuery.of(context).size.width;
    screenHeight = MediaQuery.of(context).size.height;

    return Scaffold(
      backgroundColor: Colors.grey[100],
      appBar: AppBar(
        title: const Text('üéØ Game LƒÉn Bi'),
        backgroundColor: Colors.blue[600],
        foregroundColor: Colors.white,
        elevation: 0,
        actions: [
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: Center(
              child: Text(
                'ƒêi·ªÉm: $score',
                style: const TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ),
          ),
        ],
      ),
      body: Column(
        children: [
          // Game instructions (ch·ªâ hi·ªán khi b·∫Øt ƒë·∫ßu game)
          if (score == 0)
            Padding(
              padding: const EdgeInsets.all(8.0),
              child: Card(
                child: Padding(
                  padding: const EdgeInsets.all(8.0),
                  child: Text(
                    'üì± Nghi√™ng ƒëi·ªán tho·∫°i ƒë·ªÉ ƒëi·ªÅu khi·ªÉn qu·∫£ bi xanh ƒë·∫øn v√πng ƒë√≠ch x√°m!',
                    textAlign: TextAlign.center,
                    style: const TextStyle(fontSize: 12),
                  ),
                ),
              ),
            ),

          // Game area
          Expanded(
            child: Stack(
              children: [
                // Background pattern
                Container(
                  decoration: BoxDecoration(
                    gradient: LinearGradient(
                      begin: Alignment.topLeft,
                      end: Alignment.bottomRight,
                      colors: [Colors.blue[50]!, Colors.blue[100]!],
                    ),
                  ),
                ),

                // ƒê√≠ch (Target)
                Positioned(
                  left: targetX,
                  top: targetY,
                  child: Container(
                    width: targetSize,
                    height: targetSize,
                    decoration: BoxDecoration(
                      shape: BoxShape.circle,
                      border: Border.all(color: Colors.grey[600]!, width: 4),
                      color: Colors.grey[300],
                      boxShadow: [
                        BoxShadow(
                          color: Colors.black.withValues(alpha: 0.2),
                          spreadRadius: 2,
                          blurRadius: 4,
                          offset: const Offset(0, 2),
                        ),
                      ],
                    ),
                    child: const Center(
                      child: Text('üéØ', style: TextStyle(fontSize: 24)),
                    ),
                  ),
                ),

                // Qu·∫£ bi (Ball)
                Positioned(
                  left: ballX,
                  top: ballY,
                  child: Container(
                    width: ballSize,
                    height: ballSize,
                    decoration: BoxDecoration(
                      shape: BoxShape.circle,
                      gradient: RadialGradient(
                        colors: [Colors.lightBlue[300]!, Colors.blue[700]!],
                        stops: const [0.3, 1.0],
                      ),
                      boxShadow: [
                        BoxShadow(
                          color: Colors.black.withValues(alpha: 0.3),
                          spreadRadius: 1,
                          blurRadius: 6,
                          offset: const Offset(2, 4),
                        ),
                      ],
                    ),
                  ),
                ),
              ],
            ),
          ),

          // Reset button
          Padding(
            padding: const EdgeInsets.symmetric(
              horizontal: 20.0,
              vertical: 8.0,
            ),
            child: SafeArea(
              child: Align(
                alignment: Alignment.centerRight,
                child: FloatingActionButton(
                  onPressed: _resetGame,
                  backgroundColor: Colors.orange,
                  child: const Icon(Icons.refresh, color: Colors.white),
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }
}
